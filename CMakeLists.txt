CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
CMAKE_POLICY(VERSION 2.8)
ENABLE_TESTING()

PROJECT(doozy)
SET(PACKAGE "doozy")
SET(PACKAGE_NAME "Doozy")
SET(PACKAGE_VERSION_MAJOR 0)
SET(PACKAGE_VERSION_MINOR 0)
SET(PACKAGE_VERSION_PATCH 1)
SET(PACKAGE_LOCALE_DIR ${CMAKE_INSTALL_PREFIX}/share/locale)

SET(CPACK_PACKAGE_NAME ${PACKAGE})
SET(CPACK_PACKAGE_VERSION_MAJOR ${PACKAGE_VERSION_MAJOR})
SET(CPACK_PACKAGE_VERSION_MINOR ${PACKAGE_VERSION_MINOR})
SET(CPACK_PACKAGE_VERSION_PATCH ${PACKAGE_VERSION_PATCH})
SET(CPACK_SOURCE_GENERATOR "TBZ2")
SET(CPACK_PACKAGE_FILE_NAME $CPACK_PACKAGE_NAME)
SET(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}-bin")
SET(CPACK_SOURCE_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")
SET(CPACK_SOURCE_IGNORE_FILES "/build/;/debug/;/release/;/dist/;/gfx/;/include/;/lib/;/web/;/.git/;/src/tags;~$;${CPACK_SOURCE_IGNORE_FILES}")
#SET(CPACK_PACKAGE_INSTALL_DIRECTORY(gejengel)
#SET(CPACK_RESOURCE_FILE_LICENSE(COPYING)
#SET(CPACK_RESOURCE_FILE_README(README)
#SET(CPACK_MONOLITHIC_INSTALL()
INCLUDE(CPack)

ADD_DEFINITIONS("-std=c++11 -D_FILE_OFFSET_BITS=64")
IF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    SET(CMAKE_CXX_FLAGS "-stdlib=libc++")
ENDIF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")

SET(CMAKE_XCODE_ATTRIBUTE_GCC_VERSION "com.apple.compilers.llvm.clang.1_0")
SET(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD "c++11")
SET(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY "libc++")

ADD_CUSTOM_TARGET(check COMMAND ${CMAKE_CTEST_COMMAND})
ADD_CUSTOM_TARGET(uninstall COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/CMakeUninstall.cmake)

INCLUDE_DIRECTORIES(${CMAKE_BINARY_DIR})

SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR})

ADD_SUBDIRECTORY(modules/utils)
GET_DIRECTORY_PROPERTY(UTILS_INCLUDE_DIRS	DIRECTORY modules/utils INCLUDE_DIRECTORIES)
GET_DIRECTORY_PROPERTY(UTILS_LIBRARY_DIRS 	DIRECTORY modules/utils LINK_DIRECTORIES)
GET_DIRECTORY_PROPERTY(UTILS_LIBRARIES		DIRECTORY modules/utils DEFINITION UTILS_LIBRARIES)

ADD_SUBDIRECTORY(modules/audio)
GET_DIRECTORY_PROPERTY(AUDIO_INCLUDE_DIRS	DIRECTORY modules/audio INCLUDE_DIRECTORIES)
GET_DIRECTORY_PROPERTY(AUDIO_LIBRARY_DIRS 	DIRECTORY modules/audio LINK_DIRECTORIES)
GET_DIRECTORY_PROPERTY(AUDIO_LIBRARIES		DIRECTORY modules/audio DEFINITION AUDIO_LIBRARIES)

ADD_SUBDIRECTORY(modules/image)
GET_DIRECTORY_PROPERTY(IMAGE_INCLUDE_DIRS	DIRECTORY modules/image INCLUDE_DIRECTORIES)
GET_DIRECTORY_PROPERTY(IMAGE_LIBRARY_DIRS 	DIRECTORY modules/image LINK_DIRECTORIES)
GET_DIRECTORY_PROPERTY(IMAGE_LIBRARIES		DIRECTORY modules/image DEFINITION IMAGE_LIBRARIES)

ADD_SUBDIRECTORY(modules/upnp)
GET_DIRECTORY_PROPERTY(UPNPFRAMEWORK_INCLUDE_DIRS	DIRECTORY modules/upnp INCLUDE_DIRECTORIES)
GET_DIRECTORY_PROPERTY(UPNPFRAMEWORK_LIBRARY_DIRS 	DIRECTORY modules/upnp LINK_DIRECTORIES)
GET_DIRECTORY_PROPERTY(UPNPFRAMEWORK_LIBRARIES 		DIRECTORY modules/upnp DEFINITION UPNPFRAMEWORK_LIBRARIES)


ADD_SUBDIRECTORY(src)

CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/CMakeUninstall.cmake.in" "${CMAKE_CURRENT_BINARY_DIR}/CMakeUninstall.cmake" IMMEDIATE @ONLY)
