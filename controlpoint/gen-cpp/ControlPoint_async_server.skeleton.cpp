// This autogenerated skeleton file illustrates one way to adapt a synchronous
// interface into an asynchronous interface. You should copy it to another
// filename to avoid overwriting it and rewrite as asynchronous any functions
// that would otherwise introduce unwanted latency.

#include "ControlPoint.h"
#include <thrift/protocol/TBinaryProtocol.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::async;

using boost::shared_ptr;

using namespace  ::doozy::rpc;

class ControlPointAsyncHandler : public ControlPointCobSvIf {
 public:
  ControlPointAsyncHandler() {
    syncHandler_ = std::auto_ptr<ControlPointHandler>(new ControlPointHandler);
    // Your initialization goes here
  }
  virtual ~ControlPointAsyncHandler();

  void GetRenderers(tcxx::function<void(DeviceResponse const& _return)> cob) {
    DeviceResponse _return;
    syncHandler_->GetRenderers(_return);
    return cob(_return);
  }

 protected:
  std::auto_ptr<ControlPointHandler> syncHandler_;
};

